#include "renderer/animation.h"
#include "renderer/assimp_glm_helpers.h"
#include <assimp/Importer.hpp>
#include <assimp/postprocess.h>
        
Animation::Animation(const std::string &animationPath, Model *model)
{
    Assimp::Importer Importer;
    // const aiScene *scene = Importer.ReadFile(animationPath, aiProcess_Triangulate);

    const aiScene *scene = Importer.ReadFile(animationPath, aiProcess_Triangulate | aiProcess_FlipUVs | aiProcess_ConvertToLeftHanded);	
    assert(scene && scene->mRootNode);
    
    if(!scene->mAnimations || scene->mNumAnimations == 0)
    {
        throw std::runtime_error("No animations found in file");
    }
    else std::cout<<"Animation present"<<std::endl;
    auto animation = scene->mAnimations[0];
    m_Duration = animation->mDuration;
    m_TicksPerSecond = animation->mTicksPerSecond;
    readMissingBones(animation, *model);
    readHeirarchyData(m_RootNode, scene->mRootNode);
}

Animation::~Animation(){}

Bone *Animation::findBone(const std::string &name)
{
    for(auto it = m_Bones.begin(); it!= m_Bones.end(); ++it)
    {
        if(it->getBoneName() == name)
        {
            return &(*it);                
        }
    }
    return nullptr;
}

void Animation::readMissingBones(const aiAnimation *animation, Model &model)
{
   // std::cout<<"Reading missing Bones"<<std::endl;
   int size = animation->mNumChannels;
   
   auto &BoneInfoMap = model.getBoneInfoMap();
   int &BoneCount = model.getBoneCount();

   for(int i=0; i<size; ++i)
   {
       auto channel = animation->mChannels[i];
       std::string boneName = channel->mNodeName.data;
       // std::cout<<"Found missing bone: "<<boneName<<std::endl;

       if(BoneInfoMap.find(boneName) == BoneInfoMap.end())
       {
           BoneInfoMap[boneName].id = BoneCount;
           ++BoneCount;
       }
       m_Bones.push_back(Bone(channel->mNodeName.data, BoneInfoMap[channel->mNodeName.data].id, channel));
   }

   m_BoneInfoMap = BoneInfoMap;
}

void Animation::readHeirarchyData(AssimpNodeData &dest, const aiNode *src)
{
    assert(src);    
    dest.name = src->mName.data;
    dest.transformation = AssimpGLMHelpers::ConvertMatrixToGLMFormat(src->mTransformation);
    dest.childrenCount = src->mNumChildren;

    for(int i=0; i<dest.childrenCount; ++i)
    {
        AssimpNodeData newData;
        readHeirarchyData(newData, src->mChildren[i]);
        dest.children.push_back(newData);
    }
}
