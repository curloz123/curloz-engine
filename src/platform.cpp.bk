#include "glm/ext/matrix_transform.hpp"
#include "glm/trigonometric.hpp"
#define TINYGLTF_IMPLEMENTATION
#define STB_IMAGE_WRITE_IMPLEMENTATION
#include "renderer/gltLoader.h"
#include "glad/glad.h"
#include "glm/glm.hpp"
#include "renderer/shaders.h"
#include "renderer/stb_image.h"
#include "renderer/camera.h"
#include "renderer/model.h"
#include "renderer/imageLoader.h"
#include "physics/particle.h"
#include "physics/forceGen.h"
#include <GLFW/glfw3.h>
#include <iostream>
#include <string>
#include <assimp/Importer.hpp>
#include <assimp/scene.h>
#include <assimp/postprocess.h>



int screenWidth = 1920;
int screenHeight = 1080;

int main()
{
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,3);

    GLFWwindow* window = glfwCreateWindow(screenWidth,screenHeight,"lighting window",NULL,NULL);
    if(window == NULL)
    {
        std::cout<<"GLFW window could not be created";
    }

    glfwMakeContextCurrent(window);
    if(!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout<<"Could not initialize glad\n";
        glfwTerminate();
        return -1;
    }
    glfwSetWindowSize(window,1920,1080);
    glViewport(0,0,1920,1080);
    glEnable(GL_DEPTH_TEST);

    Assimp::Importer Importer;
    const aiScene* pScene = Importer.ReadFile("assets/models/hazmat guy/HazmatGuy.fbx", aiProcess_Triangulate | aiProcess_GenNormals | aiProcess_JoinIdenticalVertices);
    if(!pScene) std::cout<<"Could not load main function's model"<<std::endl;


    Shader shaderObject = Shader("assets/shaders/assimpShader.vert","assets/shaders/assimpShader.frag");
    Shader simpleShader = Shader("assets/shaders/gltVert.vert","assets/shaders/gltFrag.frag");

    GLuint platformDiffuse = loadTextureFromFile("assets/textures/platform.jpg",false);
    shaderObject.use();
    shaderObject.setInt("material.diffuse",0);
 
    GLuint platformSpecular = loadTextureFromFile("assets/textures/containerSpecular.png",false);
    shaderObject.use();
    shaderObject.setInt("material.specular",1);
   
 
    float verticesPlatform[] = 
    {
        -1.0f,0.0f, 1.0f, 0.0f,1.0f,0.0f, 0.0f,0.0f,
        -1.0f,0.0f,-1.0f, 0.0f,1.0f,0.0f, 0.0f,100.0f,
         1.0f,0.0f,-1.0f, 0.0f,1.0f,0.0f, 100.0f,100.0f,
         1.0f,0.0f, 1.0f, 0.0f,1.0f,0.0f, 100.0f,0.0f
    };
    unsigned int indicesPlatform [] = 
    {
        0,1,2,
        2,3,0
    };

    unsigned int VAO;
    glGenVertexArrays(1,&VAO);
    glBindVertexArray(VAO);

    unsigned int VBO;
    glGenBuffers(1,&VBO);
    glBindBuffer(GL_ARRAY_BUFFER,VBO);
    glBufferData(GL_ARRAY_BUFFER,sizeof(verticesPlatform),verticesPlatform,GL_STATIC_DRAW);
    glVertexAttribPointer(0,3,GL_FLOAT,GL_FALSE,8*sizeof(float),(void*)0);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1,3,GL_FLOAT,GL_FALSE,8*sizeof(float),(void*)(3*sizeof(float)));
    glEnableVertexAttribArray(1);
    glVertexAttribPointer(2,2,GL_FLOAT,GL_FALSE,8*sizeof(float),(void*)(6*sizeof(float)));
    glEnableVertexAttribArray(2);

    unsigned int EBO;
    glGenBuffers(1,&EBO);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER,sizeof(indicesPlatform),indicesPlatform,GL_STATIC_DRAW);

    
    GLuint containerDiffuse = loadTextureFromFile("assets/textures/container.png",false);
    shaderObject.use();
    shaderObject.setInt("material.diffuse",0);

    GLuint containerSpecular = loadTextureFromFile("assets/textures/containerSpecular.png",false);
    shaderObject.use();
    shaderObject.setInt("material.specular",1);

    float verticesBox[] = {
        // positions          // normals           // texture coords
        -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,
         0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 0.0f,
         0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,
         0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,
        -0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 1.0f,
        -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,

        -0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 0.0f,
         0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 0.0f,
         0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 1.0f,
         0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 1.0f,
        -0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 1.0f,
        -0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 0.0f,

        -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 0.0f,
        -0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
        -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
        -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
        -0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
        -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 0.0f,
        
         0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,
         0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
         0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
         0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
         0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
         0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,

        -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 1.0f,
         0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 1.0f,
         0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 0.0f,
         0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 0.0f,
        -0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 0.0f,
        -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 1.0f,

        -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 1.0f,
         0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 1.0f,
         0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 0.0f,
         0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 0.0f,
        -0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 0.0f,
        -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 1.0f
    };


    unsigned int VAO2;
    glGenVertexArrays(1,&VAO2);
    glBindVertexArray(VAO2);

    unsigned int VBO2;
    glGenBuffers(1,&VBO2);
    glBindBuffer(GL_ARRAY_BUFFER,VBO2);
    glBufferData(GL_ARRAY_BUFFER,sizeof(verticesBox),verticesBox,GL_STATIC_DRAW);
    glVertexAttribPointer(0,3,GL_FLOAT,GL_FALSE,8*sizeof(float),(void*)0);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1,3,GL_FLOAT,GL_FALSE,8*sizeof(float),(void*)(3*sizeof(float)));
    glEnableVertexAttribArray(1);
    glVertexAttribPointer(2,2,GL_FLOAT,GL_FALSE,8*sizeof(float),(void*)(6*sizeof(float)));
    glEnableVertexAttribArray(2);



    glm::vec3 pointLightPositions[] =
    {
        glm::vec3( 1.0f, 3.0f, 1.0f),
        glm::vec3( 1.0f, 3.0f,-1.0f),
        glm::vec3(-1.0f, 3.0f, 1.0f),
        glm::vec3(-1.0f, 3.0f,-1.0f)
    };
    // glm::vec3 pointLightColors [] =
    // {
    //     glm::vec3(0.0f,0.0f,1.0f),
    //     glm::vec3(0.0f,1.0f,0.0f),
    //     glm::vec3(1.0f,0.0f,0.0f),
    //     glm::vec3(0.5f,0.5f,0.5f)
    // };

    int nPointLights = sizeof(pointLightPositions)/sizeof(pointLightPositions[0]);
    // int nPointLights = 0;


    float deltaTime = 0.0f;
    float timeTakenThisFrame = 0.0f;
    float timeTakenLastFrame = 0.0f;

    void processInput(GLFWwindow* window);
    glfwSetInputMode(window,GLFW_CURSOR,GLFW_CURSOR_DISABLED);

    void mouseCallBack(GLFWwindow* , double xpos , double ypos);
    void scrollCallBack(GLFWwindow*, double xOffset , double yOffset);
    glfwSetCursorPosCallback(window, mouseCallBack);
    glfwSetScrollCallback(window, scrollCallBack);

    Camera camera;
    glfwSetWindowUserPointer(window,&camera);

    // Model ourModel("models/Juliet/Juliet_Sexy_Rider.dae");

    Particle particle;
    particle.position = physics::Vector3(0.0f,0.0f,-1.0f);
    particle.velocity = physics::Vector3(0.0f,0.0f,0.0f);
    particle.damping = 0.95f;
    particle.inverseMass = 1/10.0f;
    particleGravity fgGravity(physics::Vector3(0.0f,-3.0f,0.0f));
    physics::ParticleForceRegistry forceRegister;
    forceRegister.add(&particle,&fgGravity);



    // working on our tinygltf stuff now
    Model ourModel("assets/models/hazmat guy/HazmatGuy.fbx");
    // GLTloader ourModel("assets/models/axe/scene.gltf","gltf");
    // stbi_flip_vertically_on_write(true);

    while(!glfwWindowShouldClose(window))
    {
        int pixelWidth,pixelHeight;
        glfwGetFramebufferSize(window,&pixelWidth,&pixelHeight);
        float aspectRatio = (float)pixelWidth/(float)pixelHeight;
        timeTakenThisFrame = glfwGetTime();
        deltaTime = timeTakenThisFrame - timeTakenLastFrame;
        timeTakenLastFrame = timeTakenThisFrame;
        processInput(window);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        glClearColor(0.0f,0.0f,0.0f, 1.0f);
        camera.ProcessKeyboard(window,deltaTime);

        // printf("Using shader object\n");
        shaderObject.use();

        // printf("setting up light\n");
        shaderObject.setFloat("material.shininess",32);

        shaderObject.setVec3("dirLight.direction", glm::vec3(-0.2f, -1.0f, -0.3f));
        shaderObject.setVec3("dirLight.ambient", glm::vec3(0.1f));
        shaderObject.setVec3("dirLight.diffuse", glm::vec3(0.f));
        shaderObject.setVec3("dirLight.specular", glm::vec3(0.2f));

        for(int j=0;j<nPointLights;++j)
        {
            // int j=0;
            shaderObject.setVec3("pointLights["+ std::to_string(j)+ "].position", pointLightPositions[j]);
            shaderObject.setVec3("pointLights["+ std::to_string(j)+ "].ambient", glm::vec3(0.0f));
            shaderObject.setVec3("pointLights["+ std::to_string(j)+ "].diffuse", glm::vec3(0.0));
            shaderObject.setVec3("pointLights["+ std::to_string(j)+ "].specular", glm::vec3(0.0f));
            shaderObject.setFloat("pointLights["+ std::to_string(j)+ "].constant", 1.0f);
            shaderObject.setFloat("pointLights["+ std::to_string(j)+ "].linear", 0.09f);
            shaderObject.setFloat("pointLights["+ std::to_string(j)+ "].quadratic", 0.032f);
        }

        shaderObject.setVec3("spotLight.position", camera.Position);
        shaderObject.setVec3("spotLight.direction", camera.Front);
        shaderObject.setVec3("spotLight.ambient", glm::vec3(0.1f));
        shaderObject.setVec3("spotLight.diffuse", glm::vec3(0.8f));
        shaderObject.setVec3("spotLight.specular", glm::vec3(1.0f));

        // shaderObject.setVec3("spotLight.specular", glm::vec3(0.0f));
        shaderObject.setFloat("spotLight.constant", 1.0f);
        shaderObject.setFloat("spotLight.linear", 0.09f);
        shaderObject.setFloat("spotLight.quadratic", 0.032f);
        shaderObject.setFloat("spotLight.cutOff", glm::cos(glm::radians(1.5f)));
        shaderObject.setFloat("spotLight.outerCutOff", glm::cos(glm::radians(20.0f)));




        // printf("Setting up view matrix\n");
        glm::mat4 view = camera.GetViewMatrix();
        shaderObject.setMat4("view",view);
        shaderObject.setVec3("viewPos",camera.Position);
        
        // printf("Setting up projection matrix\n");
        glm::mat4 projection = glm::mat4(1.0f);
        projection = glm::perspective(glm::radians(camera.fov),aspectRatio,0.1f,100.0f);
        shaderObject.setMat4("projection",projection);




        //Drawing our platform

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D,platformDiffuse);
        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D,platformSpecular);

        glBindVertexArray(VAO);
        // printf("Setting up model matrix\n");
        glm::mat4 model = glm::mat4(1.0f);
        model = glm::translate(model,glm::vec3(0.0f,0.0f,0.0f));
        model = glm::scale(model,glm::vec3(100.0f));
        shaderObject.setMat4("model",model);
        // ourModel.Draw(shaderObject);
        glBindVertexArray(VAO);
        glDrawElements(GL_TRIANGLES,6,GL_UNSIGNED_INT,0);


        //Drawing our box

        // shaderObject.use();
        // glActiveTexture(GL_TEXTURE0);
        // glBindTexture(GL_TEXTURE_2D,containerDiffuse);
        // glActiveTexture(GL_TEXTURE1);
        // glBindTexture(GL_TEXTURE_2D,containerSpecular);


        // model = glm::mat4(1.0f);
        // model = glm::translate(model, glm::vec3(0.0f,particle.position.y, -1.0f));
        // model = glm::translate(model, glm::vec3(0.0f,0.0f, -1.0f));
        // model = glm::rotate(model,-glm::radians(camera.Yaw - 90),glm::vec3(0.0f,1.0f,0.0f));
        // model = glm::scale(model,glm::vec3(0.005f));
        // shaderObject.setMat4("model",model);
        // glBindVertexArray(VAO2);
        // glDrawArrays(GL_TRIANGLES,0,36);

        simpleShader.use();
        simpleShader.setMat4("view",view);
        simpleShader.setMat4("projection",projection);

        float sinComponent = (float)sin(glm::radians(glfwGetTime()))*1000.0f;
        if(sinComponent <0) sinComponent *= -1;
        model = glm::mat4(1.0f);
        model = glm::translate(model,glm::vec3(0.0f,0.5f,-1.0f));
        // model = glm::rotate(model,glm::radians(90.0f),glm::vec3(1.0f,0.0f,0.0f));
        // model = glm::rotate(model,glm::radians(45.0f),glm::vec3(0.0f,1.0f,0.0f));
        // model = glm::rotate(model,glm::radians(90.0f),glm::vec3(0.0f,0.0f,1.0f));
        model = glm::scale(model,glm::vec3(0.5f));
        shaderObject.use();
        shaderObject.setMat4("model",model);

        // ourModel.Draw(simpleShader);
        ourModel.Draw(shaderObject);


        bool jump = true;
        forceRegister.updateForce(deltaTime);
        particle.integrate((physics::real)deltaTime);
        if(particle.position.y > 0.0f )
        {
            jump = false;
        }
        else
        {
            particle.velocity.y = 0.0f;
            jump = true;
        }

        if(glfwGetKey(window,GLFW_KEY_SPACE) == GLFW_PRESS && jump)
        {
            particle.velocity.y = 1.0f;
            particle.velocity = physics::Vector3(0.0f,1.5f,0.0f);
            jump = false;
        }
        bool crouch = false;
        if(glfwGetKey(window,GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
        {
            jump = false;
            camera.Position.y = 0.5f + particle.position.y;
        }
        else
        {
            camera.Position.y = 0.8f + particle.position.y;
        }
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;

}

void processInput(GLFWwindow* window)
{
    if(glfwGetKey(window,GLFW_KEY_ESCAPE) == GLFW_PRESS)
    {
        glfwSetWindowShouldClose(window,true);
    }

}

void scrollCallBack(GLFWwindow* window, double xOffset, double yOffset)
{
    Camera* camera = static_cast<Camera*>(glfwGetWindowUserPointer(window));
    camera->processScrollBack(yOffset);
}
void mouseCallBack(GLFWwindow* window , double xpos , double ypos)
{
    Camera* camera = static_cast<Camera*>(glfwGetWindowUserPointer(window));
    camera->ProcessMouseMovement(xpos , ypos);
}
