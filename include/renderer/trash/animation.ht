#pragma once

#include "renderer/model.h"
#include "renderer/bone.h"
#include <assimp/Importer.hpp>
#include <assimp/anim.h>
#include <assimp/postprocess.h>
#include <vector>
#include <string>

struct AssimpNodeData
{
    glm::mat4 transformation;
    std::string name;
    int childrenCount;
    std::vector<AssimpNodeData> children;
};

class Animation
{
    public:
        Animation(const std::string &animationPath, Model *model);
        ~Animation();
        Bone *findBone(const std::string &name);

        inline float getTicksPerSecond(){ return m_TicksPerSecond; }
        inline float getDuration(){ return m_Duration; }
        inline const AssimpNodeData &getRootNode(){ return m_RootNode; }
        inline const std::map<std::string, BoneInfo> &getBoneInfoMap(){ return m_BoneInfoMap; }

    private:
        float m_Duration;
        int m_TicksPerSecond;
        std::vector<Bone> m_Bones;
        AssimpNodeData m_RootNode;
        std::map<std::string, BoneInfo> m_BoneInfoMap;

        void readMissingBones(const aiAnimation *Animation, Model &model);
        void readHeirarchyData(AssimpNodeData &dest, const aiNode *src);
};
